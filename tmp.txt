model Event {
  id        String    @id @default(uuid())
  eventName String
  date      String
  time      String?
  category  String
  confirmed Boolean   @default(false)
  link      String?
  image     String?
  status    Int       @default(1)
  reminder  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Status:
// 1 SCHEDULED
// 2 POSTPONED
// 3 EXPIRED
// 4 CANCELLED
// 5 RUMORED

model Content {
  id        String    @id @default(uuid())
  name      String    
  category  Int       @default(1) 
  date      DateTime
  image     String?   
  link      String 
  deadlink  Boolean   @default(false)
  language  String    @default("KO")
  subbed    Boolean   @default(false)
  length    String  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Categories:
// 1 Release
// 2 Interview
// 3 Fansign
// 4 Radio
// 5 Variety
// 6 Reality
// 7 BTS
// 8 Vlog
// 9 Live
// 10 VOD
// 11 Performance
// 12 Reaction
// [13 Fancams]
// 14 Other

-----

CREATE TABLE IF NOT EXISTS `dailyevent` (
  "id" TEXT NOT NULL PRIMARY KEY,
  "eventName" TEXT NOT NULL,
  "time" TEXT NOT NULL,
  "category" TEXT NOT NULL,
  "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updatedAt" DATETIME NOT NULL
);

CREATE TABLE IF NOT EXISTS `weeklyevent` (
  "id" TEXT NOT NULL PRIMARY KEY,
  "eventName" TEXT NOT NULL,
  "time" TEXT NOT NULL,
  "date" TEXT NOT NULL,
  "category" TEXT NOT NULL,
  "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updatedAt" DATETIME NOT NULL
);

---

DECLARE @source VARCHAR(50)
SET @source = '2010-12-02 15:20:17.000'

DECLARE @Date DATETIME
SELECT @Date = CONVERT(DATETIME, '2010-12-02 15:20:17.000', 121)

SELECT @Date

SELECT eventName, date, time FROM Event WHERE date > DATE('now') ORDER BY date, time ASC;

---

// KoreaTime Component

"use client"

import { useState, useEffect } from 'react'
import HTMLReactParser from 'html-react-parser'
import EventTimer from 'ยง/lib/EventTimer'
import type { EventProps } from 'ยง/lib/types'
import Utils from 'ยง/lib/utils'
import { hlText } from './Event'

const 
  parse = HTMLReactParser,
  
  KoreaTime = (props: { nextEvent: EventProps[] }): JSX.Element => {
  
    const 
      { nextEvent } = props,

      time = new EventTimer({
        targetTime: `${nextEvent[0].date} ${nextEvent[0].time}`,
        countdown: '00d 00h 00m 00s',
        UTCtimezone: 540,
        format: 'YYYY/MM/DD HH:mm:ss',
        action: 'DING DONG!'
      }),

      [currentTime, setCurrentTime] = useState<string>('0000/00/00 00:00:00'),
      [countdown, setCountdown] = useState<string>('00d 00h 00m 00s')
      // [nextEventName, setNextEventName] = useState<string>(nextEvent[0].eventName),
      // [nextCountdown, setNextCountdown] = useState<string>(countdown)

    useEffect(() => {
      setInterval(() => setCurrentTime(time.krTime()), 1000)
      setInterval(() => {
        time.duration()
        setCountdown(time.countdown)
      }, 1000)
    }, [])

    // const checkCountdown = () => {
    //   const started = '<span className="text-yellow-500">EVENT HAS STARTED!</span>'
    //   if (countdown.match(/^0d 0h 0m 0s|-1d 0h 0m -1s/g)) {
    //     return parse(started)
    //   } else if (countdown.match(/-1d 0h 0m -2s/g))  {
    //     let nxt = nextEvent[0]
    //     setNextEventName(nxt.eventName)
    //     // time.setTargetTime(`${nxt.date} ${nxt.time}`)
    //     // setNextCountdown(time.countdown)
    //     return nextCountdown
    //   } else {
    //     return hlText(parse(countdown))
    //   }
    // }

    return (
      <>
        <span className="koreatime self-end">Next Event: <strong>{Utils.short(nextEvent[0].eventName)}</strong> {countdown}</span>
        {/* <span className="koreatime self-end">Next Event: <strong>{Utils.short(nextEventName)}</strong> {checkCountdown()}</span> */}
        <span className="koreatime self-end">KST: {currentTime}</span> 
      </>
    )
  }

export default KoreaTime